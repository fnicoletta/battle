{"ast":null,"code":"import _defineProperty from \"/Users/FrankyFresh/Desktop/battle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/FrankyFresh/Desktop/battle/src/components/popular.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchPopularRepos } from '../utils/api';\nimport { FaUser, FaStar, FaCodeBranch, FaExclamationTriangle } from 'react-icons/fa';\nimport Card from './card.js';\nimport Loading from './loading.js';\nimport Tooltip from './tooltip.js';\n\nfunction LangaugesNav({\n  selected,\n  onUpdateLanguage\n}) {\n  const languages = ['All', 'JavaScript', 'Ruby', 'Java', 'CSS', 'Python'];\n  return React.createElement(\"ul\", {\n    className: \"flex-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, languages.map(language => React.createElement(\"li\", {\n    key: language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn-clear nav-link\",\n    style: language === selected ? {\n      color: 'rgb(187, 46, 31)'\n    } : null,\n    onClick: () => onUpdateLanguage(language),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, language))));\n}\n\nLangaugesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n};\n\nfunction ReposGrid({\n  repos\n}) {\n  return React.createElement(\"ul\", {\n    className: \"grid space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, repos.map((repo, index) => {\n    const owner = repo.owner,\n          html_url = repo.html_url,\n          stargazers_count = repo.stargazers_count,\n          forks = repo.forks,\n          open_issues = repo.open_issues;\n    const login = owner.login,\n          avatar_url = owner.avatar_url;\n    return React.createElement(\"li\", {\n      key: html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Card, {\n      header: \"#\".concat(index + 1),\n      avatar: avatar_url,\n      href: html_url,\n      name: login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"card-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      text: \"Github Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(FaUser, {\n      color: \"rgb(255, 191, 116)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"https://github.com/\".concat(login),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, login))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(FaStar, {\n      color: \"rgb(255, 215, 0)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), stargazers_count.toLocaleString(), \" stars\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(FaCodeBranch, {\n      color: \"rgb(129, 195, 245)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), forks.toLocaleString(), \" forks\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FaExclamationTriangle, {\n      color: \"rgb(241, 138, 147)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), open_issues.toLocaleString(), \" open\"))));\n  }));\n}\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired\n};\nexport default class Popular extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLanguage: 'All',\n      repos: {},\n      error: null\n    };\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateLanguage(this.state.selectedLanguage);\n  }\n\n  updateLanguage(selectedLanguage) {\n    this.setState({\n      selectedLanguage,\n      error: null\n    });\n\n    if (!this.state.repos[selectedLanguage]) {\n      fetchPopularRepos(selectedLanguage).then(data => {\n        this.setState(({\n          repos\n        }) => ({\n          repos: _objectSpread({}, repos, {\n            [selectedLanguage]: data\n          })\n        }));\n      }).catch(() => {\n        console.warn('Error fetching repos: ', this.state.error);\n        this.setState({\n          error: \"There was an error fetching the repositories.\"\n        });\n      });\n    }\n  }\n\n  isLoading() {\n    const _this$state = this.state,\n          selectedLanguage = _this$state.selectedLanguage,\n          repos = _this$state.repos,\n          error = _this$state.error;\n    return !repos[selectedLanguage] && error === null;\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          selectedLanguage = _this$state2.selectedLanguage,\n          repos = _this$state2.repos,\n          error = _this$state2.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(LangaugesNav, {\n      selected: selectedLanguage,\n      onUpdateLanguage: this.updateLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), this.isLoading() && React.createElement(Loading, {\n      text: \"Fetching Repos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), error && React.createElement(\"p\", {\n      className: \"center-text error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, error), repos[selectedLanguage] && React.createElement(ReposGrid, {\n      repos: repos[selectedLanguage],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/FrankyFresh/Desktop/battle/src/components/popular.js"],"names":["React","PropTypes","fetchPopularRepos","FaUser","FaStar","FaCodeBranch","FaExclamationTriangle","Card","Loading","Tooltip","LangaugesNav","selected","onUpdateLanguage","languages","map","language","color","propTypes","string","isRequired","func","ReposGrid","repos","repo","index","owner","html_url","stargazers_count","forks","open_issues","login","avatar_url","toLocaleString","array","Popular","Component","constructor","props","state","selectedLanguage","error","updateLanguage","bind","isLoading","componentDidMount","setState","then","data","catch","console","warn","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { fetchPopularRepos } from '../utils/api'\nimport { FaUser, FaStar, FaCodeBranch, FaExclamationTriangle } from 'react-icons/fa'\nimport Card from './card.js'\nimport Loading from './loading.js'\nimport Tooltip from './tooltip.js'\n\nfunction LangaugesNav ({ selected, onUpdateLanguage }) {\n  const languages = ['All', 'JavaScript', 'Ruby', 'Java', 'CSS', 'Python']\n\n  return (\n    <ul className='flex-center'>\n      {languages.map((language) => (\n        <li key={language}>\n          <button\n            className='btn-clear nav-link'\n            style={language === selected ? { color: 'rgb(187, 46, 31)' } : null}\n            onClick={() => onUpdateLanguage(language)}>\n            {language}\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nLangaugesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n}\n\nfunction ReposGrid ({ repos }) {\n  return (\n    <ul className='grid space-around'>\n      {repos.map((repo, index) => {\n        const { owner, html_url, stargazers_count, forks, open_issues } = repo\n        const { login, avatar_url } = owner\n\n        return (\n          <li key={html_url}>\n            <Card\n              header={`#${index + 1}`}\n              avatar={avatar_url}\n              href={html_url}\n              name={login}\n            >\n              <ul className='card-list'>\n              <li>\n                <Tooltip text={`Github Username`}>\n                <FaUser color='rgb(255, 191, 116)' size={22} />\n                <a href={`https://github.com/${login}`}>\n                  {login}\n                </a>\n                </Tooltip>\n              </li>\n              <li>\n                <FaStar color='rgb(255, 215, 0)' size={22} />\n                {stargazers_count.toLocaleString()} stars\n              </li>\n              <li>\n                <FaCodeBranch color='rgb(129, 195, 245)' size={22} />\n                {forks.toLocaleString()} forks\n              </li>\n              <li>\n                <FaExclamationTriangle color='rgb(241, 138, 147)' size={22} />\n                {open_issues.toLocaleString()} open\n              </li>\n            </ul>\n          </Card>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired\n}\n\nexport default class Popular extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      selectedLanguage: 'All',\n      repos: {},\n      error: null,\n    }\n\n    this.updateLanguage = this.updateLanguage.bind(this)\n    this.isLoading = this.isLoading.bind(this)\n  }\n  componentDidMount () {\n    this.updateLanguage(this.state.selectedLanguage)\n  }\n  updateLanguage (selectedLanguage) {\n    this.setState({\n      selectedLanguage,\n      error: null,\n    })\n\n    if (!this.state.repos[selectedLanguage]) {\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          this.setState(({ repos }) => ({\n            repos: {\n              ...repos,\n              [selectedLanguage]: data\n            }\n          }))\n        })\n        .catch(() => {\n          console.warn('Error fetching repos: ', this.state.error)\n\n          this.setState({\n            error: `There was an error fetching the repositories.`\n          })\n        })\n    }\n  }\n  isLoading() {\n    const { selectedLanguage, repos, error } = this.state\n\n    return !repos[selectedLanguage] && error === null\n  }\n  render() {\n    const { selectedLanguage, repos, error } = this.state\n\n    return (\n      <React.Fragment>\n        <LangaugesNav\n          selected={selectedLanguage}\n          onUpdateLanguage={this.updateLanguage}\n        />\n\n        {this.isLoading() && <Loading text='Fetching Repos'/>}\n\n        {error && <p className='center-text error'>{error}</p>}\n\n        {repos[selectedLanguage] && <ReposGrid repos={repos[selectedLanguage]} />}\n      </React.Fragment>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}