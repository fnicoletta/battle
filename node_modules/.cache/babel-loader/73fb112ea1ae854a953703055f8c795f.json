{"ast":null,"code":"const id = \"\";\nconst sec = \"\";\nconst params = \"?client_id=\".concat(id, \"&client_secret=\").concat(sec);\n\nfunction getErrorMsg(message, username) {\n  if (message === 'Not Found') {\n    return \"\".concat(username, \" doesn't exist\");\n  }\n\n  return message;\n}\n\nfunction getProfile(username) {\n  return fetch(\"https://api.github.com/users/\".concat(username).concat(params)).then(res => res.json()).then(profile => {\n    if (profile.message) {\n      throw new Error(getErrorMsg(profile.message, username));\n    }\n\n    return profile;\n  });\n}\n\nfunction getRepos(username) {\n  return fetch(\"https://api.github.com/users/\".concat(username, \"/repos\").concat(params, \"&per_page=100\")).then(res => res.json()).then(repos => {\n    if (repos.message) {\n      throw new Error(getErrorMsg(repos.message, username));\n    }\n\n    return repos;\n  });\n}\n\nfunction getStarCount(repos) {\n  return repos.reduce((count, {\n    stargazers_count\n  }) => count + stargazers_count, 0);\n}\n\nfunction calculateScore(followers, repos) {\n  return followers * 3 + getStarCount(repos);\n}\n\nfunction getUserData(player) {\n  return Promise.all([getProfile(player), getRepos(player)]).then(([profile, repos]) => ({\n    profile,\n    score: calculateScore(profile.followers, repos)\n  }));\n}\n\nfunction sortPlayers(players) {\n  return players.sort((a, b) => b.score - a.score);\n}\n\nexport function battle(players) {\n  return Promise.all([getUserData(players[0]), getUserData(players[1])]).then(results => sortPlayers(results));\n}\nexport function fetchPopularRepos(language) {\n  const endpoint = window.encodeURI(\"https://api.github.com/search/repositories?q=stars:>1+language:\".concat(language, \"&sort=stars&order=desc&type=Repositories\"));\n  return fetch(endpoint).then(res => res.json()).then(data => {\n    if (!data.items) {\n      throw new Error(data.message);\n    }\n\n    return data.items;\n  });\n}","map":{"version":3,"sources":["/Users/FrankyFresh/Desktop/battle2/src/utils/api.js"],"names":["id","sec","params","getErrorMsg","message","username","getProfile","fetch","then","res","json","profile","Error","getRepos","repos","getStarCount","reduce","count","stargazers_count","calculateScore","followers","getUserData","player","Promise","all","score","sortPlayers","players","sort","a","b","battle","results","fetchPopularRepos","language","endpoint","window","encodeURI","data","items"],"mappings":"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","sourcesContent":["const id = \"\"\nconst sec = \"\"\nconst params = `?client_id=${id}&client_secret=${sec}`\n\nfunction getErrorMsg (message, username) {\n  if (message === 'Not Found') {\n    return `${username} doesn't exist`\n  }\n\n  return message\n}\n\nfunction getProfile (username) {\n  return fetch(`https://api.github.com/users/${username}${params}`)\n    .then((res) => res.json())\n    .then((profile) => {\n      if (profile.message) {\n        throw new Error(getErrorMsg(profile.message, username))\n      }\n\n      return profile\n    })\n}\n\nfunction getRepos (username) {\n  return fetch(`https://api.github.com/users/${username}/repos${params}&per_page=100`)\n    .then((res) => res.json())\n    .then((repos) => {\n      if (repos.message) {\n        throw new Error(getErrorMsg(repos.message, username))\n      }\n\n      return repos\n    })\n}\n\nfunction getStarCount (repos) {\n  return repos.reduce((count, { stargazers_count }) => count + stargazers_count , 0)\n}\n\nfunction calculateScore (followers, repos) {\n  return (followers * 3) + getStarCount(repos)\n}\n\nfunction getUserData (player) {\n  return Promise.all([\n    getProfile(player),\n    getRepos(player)\n  ]).then(([ profile, repos ]) => ({\n    profile,\n    score: calculateScore(profile.followers, repos)\n  }))\n}\n\nfunction sortPlayers (players) {\n  return players.sort((a, b) => b.score - a.score)\n}\n\nexport function battle (players) {\n  return Promise.all([\n    getUserData(players[0]),\n    getUserData(players[1])\n  ]).then((results) => sortPlayers(results))\n}\n\nexport function fetchPopularRepos (language) {\n  const endpoint = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`)\n\n  return fetch(endpoint)\n    .then((res) => res.json())\n    .then((data) => {\n      if (!data.items) {\n        throw new Error(data.message)\n      }\n\n      return data.items\n    })\n}"]},"metadata":{},"sourceType":"module"}