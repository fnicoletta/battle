{"version":3,"sources":["contexts/theme.js","components/loading.js","components/nav.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","Consumer","Provider","ThemeConsumer","ThemeProvider","styles","content","fontSize","position","left","right","marginTop","textAlign","Loading","state","props","text","this","speed","interval","window","setInterval","setState","clearInterval","style","Component","defaultProps","activeStyle","color","Nav","theme","toggleTheme","className","to","exact","onClick","Popular","lazy","Battle","Results","App","value","fallback","path","component","render","Boolean","location","hostname","match","ReactDOM","id","document","getElementById"],"mappings":"mGAAA,+E,EAAA,OAE+BA,EAAMC,gBAA7BC,E,EAAAA,SAAUC,E,EAAAA,SAELC,EAAgBF,EAChBG,EAAgBF,G,6HCFvBG,EAAS,CACdC,QAAS,CACTC,SAAU,OACVC,SAAU,WACVC,KAAM,IACNC,MAAO,IACPC,UAAW,OACXC,UAAW,WAISC,E,2MACpBC,MAAQ,CACNR,QAAS,EAAKS,MAAMC,M,mFAGD,IAAD,SACKC,KAAKF,MAArBG,EADW,EACXA,MAAOF,EADI,EACJA,KAEfC,KAAKE,SAAWC,OAAOC,aAAY,WAClC,EAAKP,MAAMR,UAAYU,EAAO,MAC3B,EAAKM,SAAS,CACfhB,QAASU,IAER,EAAKM,UAAS,kBAAkB,CACjChB,QADe,EAAGA,QACC,UAInBY,K,6CAIHE,OAAOG,cAAcN,KAAKE,Y,+BAI1B,OACC,uBAAGK,MAAOnB,EAAOC,SACfW,KAAKH,MAAMR,a,GA5BqBmB,aAwCrCZ,EAAQa,aAAe,CACtBV,KAAM,UACNE,MAAO,M,mMCpDFS,EAAc,CACnBC,MAAO,oBAGO,SAASC,IACvB,OACC,kBAAC,IAAD,MACE,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACA,yBAAKC,UAAU,qBACf,wBAAIA,UAAU,WACb,4BACC,kBAAC,IAAD,CACCC,GAAG,IACHC,OAAK,EACLF,UAAU,WACVL,YAAaA,GAJd,YASD,4BACC,kBAAC,IAAD,CACCM,GAAG,UACHC,OAAK,EACLF,UAAU,WACVL,YAAaA,GAJd,YAUD,4BACAH,MAAO,CAACjB,SAAU,IAClByB,UAAU,YACVG,QAASJ,GAEG,UAAVD,EAAoB,eAAO,oB,mBCjC5BM,EAAUC,gBAAK,kBAAM,sDACrBC,EAASD,gBAAK,kBAAM,sDACpBE,EAAUF,gBAAK,kBAAM,sDAqCZG,E,2MAjCd1B,MAAQ,CACNgB,MAAO,QACPC,YAAa,WACZ,EAAKT,UAAS,kBAAgB,CAC7BQ,MAAiB,UADJ,EAAGA,MACW,OAAS,c,wEAMvC,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAeW,MAAOxB,KAAKH,OAC1B,yBAAKkB,UAAWf,KAAKH,MAAMgB,OAC1B,yBAAKE,UAAU,aACd,kBAACH,EAAD,MAEA,kBAAC,WAAD,CAAUa,SAAU,kBAAC,IAAD,OACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOR,OAAK,EAACS,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOF,OAAK,EAACS,KAAK,UAAUC,UAAWN,IACvC,kBAAC,IAAD,CAAOJ,OAAK,EAACS,KAAK,kBAAkBC,UAAWL,IAC/C,kBAAC,IAAD,CAAOM,OAAQ,kBAAM,gD,GAvBZpB,aCZEqB,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCANC,IAASL,OACR,kBAAC,EAAD,CAAKM,GAAG,QACRC,SAASC,eAAe,W","file":"static/js/main.dd5700d9.chunk.js","sourcesContent":["import React from 'react'\n\nconst { Consumer, Provider } = React.createContext()\n\nexport const ThemeConsumer = Consumer\nexport const ThemeProvider = Provider","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst styles = {\n\tcontent: {\n\tfontSize: '35px',\n\tposition: 'absolute',\n\tleft: '0',\n\tright: '0',\n\tmarginTop: '20px',\n\ttextAlign: 'center'\n}\n}\n\nexport default class Loading extends Component {\n\tstate = {\n\t\t\tcontent: this.props.text\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { speed, text } = this.props\n\n\t\tthis.interval = window.setInterval(() => {\n\t\t\tthis.state.content === text + '...'\n\t\t\t\t? this.setState({\n\t\t\t\t\tcontent: text\n\t\t\t\t}) \n\t\t\t\t: this.setState(({ content }) => ({\n\t\t\t\t\tcontent: content + '.'\n\t\t\t\t})\n\t\t\t)\n\n\t\t}, speed)\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.clearInterval(this.interval)\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<p style={styles.content}>\n\t\t\t\t{this.state.content}\n\t\t\t</p>\n\t\t)\n\n\t}\n}\n\nLoading.propTypes = {\n\ttext: PropTypes.string.isRequired,\n\tspeed: PropTypes.number.isRequired\n}\n\nLoading.defaultProps = {\n\ttext: 'Loading',\n\tspeed: 300\n}","import React from 'react'\nimport { ThemeConsumer } from '../contexts/theme.js'\nimport { NavLink } from 'react-router-dom'\n\nconst activeStyle = {\n\tcolor: 'rgb(187, 46, 31)'\n}\n\nexport default function Nav() {\n\treturn(\n\t\t<ThemeConsumer>\n\t\t\t{({ theme, toggleTheme }) => (\n\t\t\t\t<nav className='row space-between'>\n\t\t\t\t<ul className='row nav'>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink \n\t\t\t\t\t\t\tto='/'\n\t\t\t\t\t\t\texact \n\t\t\t\t\t\t\tclassName='nav-link'\n\t\t\t\t\t\t\tactiveStyle={activeStyle}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPopular\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink \n\t\t\t\t\t\t\tto='/battle'\n\t\t\t\t\t\t\texact \n\t\t\t\t\t\t\tclassName='nav-link'\n\t\t\t\t\t\t\tactiveStyle={activeStyle}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBattle\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t\t<button \n\t\t\t\t\tstyle={{fontSize: 30}}\n\t\t\t\t\tclassName='btn-clear'\n\t\t\t\t\tonClick={toggleTheme}\n\t\t\t\t\t>\n\t\t\t\t\t{ theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}\t\n\t\t\t\t\t</button>\n\t\t\t\t</nav>\n\t\t\t)}\n\t\t</ThemeConsumer>\n\t)\n}","import React, { Component, lazy, Suspense } from 'react'\nimport './index.css'\nimport { ThemeProvider } from './contexts/theme.js'\nimport Nav from './components/nav.js'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Loading from './components/loading.js'\n\nconst Popular = lazy(() => import('./components/popular.js'))\nconst Battle = lazy(() => import('./components/battle.js'))\nconst Results = lazy(() => import('./components/results.js'))\n\n\nclass App extends Component {\n\tstate = {\n\t\t\ttheme: 'light',\n\t\t\ttoggleTheme: () => {\n\t\t\t\tthis.setState(({ theme }) => ({\n\t\t\t\t\ttheme: theme === 'light' ? 'dark' : 'light'\n\t\t\t\t}))\n\t\t\t}\n\t\t}\n\n  render() {\n  return (\n  \t<Router>\n\t  \t<ThemeProvider value={this.state}>\n\t\t  \t<div className={this.state.theme}>\n\t\t\t   <div className='container'>\n\t\t\t    <Nav />\n\n\t\t\t    <Suspense fallback={<Loading />}>\n\t\t\t    <Switch>\n\t\t\t      <Route exact path='/' component={Popular} />\n\t\t\t      <Route exact path='/battle' component={Battle} />\n\t\t\t      <Route exact path='/battle/results' component={Results} />\n\t\t\t      <Route render={() => <h1>404</h1>} />\n\t\t\t    </Switch>\n\t\t\t    </Suspense>\n\t\t\t   </div>\n\t\t   </div>\n\t    </ThemeProvider>\n    </Router>\n  );\n}\n}\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App id='app' />, \n\tdocument.getElementById('root'));"],"sourceRoot":""}